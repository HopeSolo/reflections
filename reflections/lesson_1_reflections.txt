Opened this file just by using command lines...

Some short-cuts learned:
pwd #	print working directory
ls #	list of files in directory
cd #	change directory
cd~ #	change directory to home directory

git diff ID1 ID2 # difference of two commits
git init # initialize repository
git status # status of repository
git checkout commitID # checkout commit
git log # list of commits
git reset filename # remove file from being commited
git add filename # adds file to staging area
git commit -m 'your message here' # commit with commit name

to compare two files # on Win FC # on gitBash diff

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
- you can always get to an working version of your code
- it's a lot more convinient if the saves are aotomatically made
- the versions are shown in a line and not as name1, name2, name3...


CLONING A REPOSITORY
To clone a repository, run git clone followed by a space and the repository URL.

EXITING GIT LOG
To stop viewing git log output, press q (which stands for quit).

GETTING COLORED OUTPUT
To get colored diff output, run git config --global color.ui auto

USING GIT LOG AND GIT DIFF
As a reminder, running git log will show a list of the recent commits with information about them, including commit IDs. Running git diff followed by two commit IDs will compare the two versions of the code in those commits

 SEE STATISTICS MADE TO A COMMIT
git log --stat


FORMAT OF GIT CHECKOUT
The command Caroline types to checkout the "Revert controls" commit is git checkout b0678b161fcf74467ed3a63110557e3d6229cfa6.

ls -a

GIT REPOSITORIES AND DIRECTORIES
Each Git repository is tied to a specific directory - the directory where you ran git init. Only files from that directory (and subdirectories inside that directory) will be contained in that repository, and you can have different repositories in different directories.

If you accidentally add a file to the staging area, you can remove it using git reset. For example, if you accidentally add lesson_2_reflections.txt, but donâ€™t want it to be committed yet, run git reset lesson_2_reflections.txt and the file will be removed from the staging area, but it will still be in your working directory.

